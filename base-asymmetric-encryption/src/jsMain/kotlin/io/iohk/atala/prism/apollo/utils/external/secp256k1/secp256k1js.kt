// Automatically generated by dukat and then slightly adjusted manually to make it compile
@file:Suppress("ktlint")
// @file:Suppress("INTERFACE_WITH_SUPERCLASS", "OVERRIDING_FINAL_MEMBER", "RETURN_TYPE_MISMATCH_ON_OVERRIDE", "CONFLICTING_OVERLOADS")
@file:JsModule("@noble/secp256k1")
/* ktlint-disable */
package io.iohk.atala.prism.apollo.utils.external.secp256k1

import io.iohk.atala.prism.apollo.utils.external.BN
import kotlin.js.*
import org.khronos.webgl.*
import org.w3c.dom.*
import org.w3c.dom.events.*
import org.w3c.dom.parsing.*
import org.w3c.dom.svg.*
import org.w3c.dom.url.*
import org.w3c.fetch.*
import org.w3c.files.*
import org.w3c.notifications.*
import org.w3c.performance.*
import org.w3c.workers.*
import org.w3c.xhr.*
import org.khronos.webgl.Uint8Array

external object CURVE {
    var p: BN
    var n: BN
    var a: BN
    var b: BN
    var Gx: BN
    var Gy: BN
}

external interface AffinePoint {
    var x: BN
    var y: BN
}

external open class Point(px: BN, py: BN, pz: BN) {
    open var px: BN
    open var py: BN
    open var pz: BN
    open fun equals(other: Point): Boolean
    open fun negate(): Point
    open fun double(): Point
    open fun add(other: Point): Point
    open fun mul(n: BN, safe: Boolean = definedExternally): Point
    open fun mulAddQUns(R: Point, u1: BN, u2: BN): Point
    open fun toAffine(): AffinePoint
    open fun assertValidity(): Point
    open fun multiply(n: BN): Point
    open fun aff(): AffinePoint
    open fun ok(): Point
    open fun toHex(isCompressed: Boolean = definedExternally): String
    open fun toRawBytes(isCompressed: Boolean = definedExternally): Uint8Array

    companion object {
        var BASE: Point
        var ZERO: Point
        fun fromAffine(p: AffinePoint): Point
        fun fromHex(hex: Uint8Array): Point
        fun fromHex(hex: String): Point
        fun fromPrivateKey(k: Uint8Array): Point
        fun fromPrivateKey(k: String): Point
        fun fromPrivateKey(k: BN): Point
    }
}

external fun getPublicKey(privKey: Uint8Array, isCompressed: Boolean = definedExternally): Uint8Array

external fun getPublicKey(privKey: Uint8Array): Uint8Array

external fun getPublicKey(privKey: String, isCompressed: Boolean = definedExternally): Uint8Array

external fun getPublicKey(privKey: String): Uint8Array

external fun getPublicKey(privKey: BN, isCompressed: Boolean = definedExternally): Uint8Array

external fun getPublicKey(privKey: BN): Uint8Array

external open class Signature(r: BN, s: BN, recovery: BN? = definedExternally) {
    open var r: BN
    open var s: BN
    open var recovery: BN?
    open fun assertValidity(): Signature /* this */
    open fun addRecoveryBit(rec: BN): Signature /* Signature & `T$2` */
    open fun hasHighS(): Boolean
    open fun recoverPublicKey(msgh: Uint8Array): Point
    open fun recoverPublicKey(msgh: String): Point
    open fun toCompactRawBytes(): Uint8Array
    open fun toCompactHex(): String

    companion object {
        fun fromCompact(hex: Uint8Array): Signature
        fun fromCompact(hex: String): Signature
    }
}

external interface `T$0` {
    var lowS: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var extraEntropy: dynamic /* Boolean? | Uint8Array? | String? */
        get() = definedExternally
        set(value) = definedExternally
}

external fun signAsync(msgh: Uint8Array, priv: Uint8Array, opts: `T$0` = definedExternally): Promise<Signature /* Signature & `T$2` */>

external fun signAsync(msgh: Uint8Array, priv: Uint8Array): Promise<Signature /* Signature & `T$2` */>

external fun signAsync(msgh: Uint8Array, priv: String, opts: `T$0` = definedExternally): Promise<Signature /* Signature & `T$2` */>

external fun signAsync(msgh: Uint8Array, priv: String): Promise<Signature /* Signature & `T$2` */>

external fun signAsync(msgh: Uint8Array, priv: BN, opts: `T$0` = definedExternally): Promise<Signature /* Signature & `T$2` */>

external fun signAsync(msgh: Uint8Array, priv: BN): Promise<Signature /* Signature & `T$2` */>

external fun signAsync(msgh: String, priv: Uint8Array, opts: `T$0` = definedExternally): Promise<Signature /* Signature & `T$2` */>

external fun signAsync(msgh: String, priv: Uint8Array): Promise<Signature /* Signature & `T$2` */>

external fun signAsync(msgh: String, priv: String, opts: `T$0` = definedExternally): Promise<Signature /* Signature & `T$2` */>

external fun signAsync(msgh: String, priv: String): Promise<Signature /* Signature & `T$2` */>

external fun signAsync(msgh: String, priv: BN, opts: `T$0` = definedExternally): Promise<Signature /* Signature & `T$2` */>

external fun signAsync(msgh: String, priv: BN): Promise<Signature /* Signature & `T$2` */>

external fun sign(msgh: Uint8Array, priv: Uint8Array, opts: `T$0` = definedExternally): Signature /* Signature & `T$2` */

external fun sign(msgh: Uint8Array, priv: Uint8Array): Signature /* Signature & `T$2` */

external fun sign(msgh: Uint8Array, priv: String, opts: `T$0` = definedExternally): Signature /* Signature & `T$2` */

external fun sign(msgh: Uint8Array, priv: String): Signature /* Signature & `T$2` */

external fun sign(msgh: Uint8Array, priv: BN, opts: `T$0` = definedExternally): Signature /* Signature & `T$2` */

external fun sign(msgh: Uint8Array, priv: BN): Signature /* Signature & `T$2` */

external fun sign(msgh: String, priv: Uint8Array, opts: `T$0` = definedExternally): Signature /* Signature & `T$2` */

external fun sign(msgh: String, priv: Uint8Array): Signature /* Signature & `T$2` */

external fun sign(msgh: String, priv: String, opts: `T$0` = definedExternally): Signature /* Signature & `T$2` */

external fun sign(msgh: String, priv: String): Signature /* Signature & `T$2` */

external fun sign(msgh: String, priv: Any, opts: `T$0` = definedExternally): Signature /* Signature & `T$2` */

external fun sign(msgh: String, priv: Any): Signature /* Signature & `T$2` */

external interface SigLike {
    var r: BN
    var s: BN
}

external interface `T$1` {
    var lowS: Boolean?
        get() = definedExternally
        set(value) = definedExternally
}

external fun verify(sig: Uint8Array, msgh: Uint8Array, pub: Uint8Array, opts: `T$1` = definedExternally): Boolean

external fun verify(sig: Uint8Array, msgh: Uint8Array, pub: Uint8Array): Boolean

external fun verify(sig: Uint8Array, msgh: Uint8Array, pub: String, opts: `T$1` = definedExternally): Boolean

external fun verify(sig: Uint8Array, msgh: Uint8Array, pub: String): Boolean

external fun verify(sig: Uint8Array, msgh: String, pub: Uint8Array, opts: `T$1` = definedExternally): Boolean

external fun verify(sig: Uint8Array, msgh: String, pub: Uint8Array): Boolean

external fun verify(sig: Uint8Array, msgh: String, pub: String, opts: `T$1` = definedExternally): Boolean

external fun verify(sig: Uint8Array, msgh: String, pub: String): Boolean

external fun verify(sig: String, msgh: Uint8Array, pub: Uint8Array, opts: `T$1` = definedExternally): Boolean

external fun verify(sig: String, msgh: Uint8Array, pub: Uint8Array): Boolean

external fun verify(sig: String, msgh: Uint8Array, pub: String, opts: `T$1` = definedExternally): Boolean

external fun verify(sig: String, msgh: Uint8Array, pub: String): Boolean

external fun verify(sig: String, msgh: String, pub: Uint8Array, opts: `T$1` = definedExternally): Boolean

external fun verify(sig: String, msgh: String, pub: Uint8Array): Boolean

external fun verify(sig: String, msgh: String, pub: String, opts: `T$1` = definedExternally): Boolean

external fun verify(sig: String, msgh: String, pub: String): Boolean

external fun verify(sig: SigLike, msgh: Uint8Array, pub: Uint8Array, opts: `T$1` = definedExternally): Boolean

external fun verify(sig: SigLike, msgh: Uint8Array, pub: Uint8Array): Boolean

external fun verify(sig: SigLike, msgh: Uint8Array, pub: String, opts: `T$1` = definedExternally): Boolean

external fun verify(sig: SigLike, msgh: Uint8Array, pub: String): Boolean

external fun verify(sig: SigLike, msgh: String, pub: Uint8Array, opts: `T$1` = definedExternally): Boolean

external fun verify(sig: SigLike, msgh: String, pub: Uint8Array): Boolean

external fun verify(sig: SigLike, msgh: String, pub: String, opts: `T$1` = definedExternally): Boolean

external fun verify(sig: SigLike, msgh: String, pub: String): Boolean

external fun getSharedSecret(privA: Uint8Array, pubB: Uint8Array, isCompressed: Boolean = definedExternally): Uint8Array

external fun getSharedSecret(privA: Uint8Array, pubB: Uint8Array): Uint8Array

external fun getSharedSecret(privA: Uint8Array, pubB: String, isCompressed: Boolean = definedExternally): Uint8Array

external fun getSharedSecret(privA: Uint8Array, pubB: String): Uint8Array

external fun getSharedSecret(privA: String, pubB: Uint8Array, isCompressed: Boolean = definedExternally): Uint8Array

external fun getSharedSecret(privA: String, pubB: Uint8Array): Uint8Array

external fun getSharedSecret(privA: String, pubB: String, isCompressed: Boolean = definedExternally): Uint8Array

external fun getSharedSecret(privA: String, pubB: String): Uint8Array

external fun hashToPrivateKey(hash: Uint8Array): Uint8Array

external fun hashToPrivateKey(hash: String): Uint8Array

external object etc {
    var hexToBytes: (hex: String) -> Uint8Array
    var bytesToHex: (b: Uint8Array) -> String
    var concatBytes: (arrs: Uint8Array) -> Uint8Array
    var bytesToNumberBE: (b: Uint8Array) -> Any
    var numberToBytesBE: (num: Any) -> Uint8Array
    var mod: (a: Any, b: Any) -> Any
    var invert: (num: Any, md: Any) -> Any
    var hmacSha256Async: (key: Uint8Array, msgs: Uint8Array) -> Promise<Uint8Array>
    var hmacSha256Sync: ((key: Uint8Array, msgs: Uint8Array) -> Uint8Array)?
    var hashToPrivateKey: Any
    var randomBytes: (len: BN) -> Uint8Array
}

external object utils {
    var normPrivateKeyToScalar: (p: dynamic /* Uint8Array | String | Any */) -> Any
    var isValidPrivateKey: (key: dynamic /* Uint8Array | String */) -> Boolean
    var randomPrivateKey: () -> Uint8Array
    fun precompute(w: BN = definedExternally, p: Point = definedExternally): Point
}