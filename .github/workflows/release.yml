name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
      release_swift:
        description: 'Release Swift package?'
        type: boolean
        required: false
        default: true
      release_maven:
        description: 'Release JVM & Android to Maven?'
        type: boolean
        required: false
        default: true
      release_ts:
        description: 'Release TypeScript package?'
        type: boolean
        required: false
        default: true

permissions:
  contents: write
  packages: write

jobs:
  unified_release:
    name: Unified Release (Swift/Maven/npm)
    runs-on: macos-latest

    steps:
      - name: Checkout specified branch
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch }}
          token: ${{ secrets.IDENTUS_CI }}

      - name: Install Java
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: zulu

      - name: Cache Homebrew setup
        uses: actions/cache@v4
        id: brew-cache
        with:
          path: |
            /usr/local/Homebrew
            /opt/homebrew
          key: brew-${{ runner.os }}-${{ formatDate('YYYY-MM') }}
          restore-keys: |
            brew-${{ runner.os }}-

      - name: Setup Homebrew & Dependencies
        if: steps.brew-cache.outputs.cache-hit != 'true'
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew install autoconf automake libtool rustup gpg
          brew tap messense/macos-cross-toolchains
          brew install --overwrite x86_64-unknown-linux-gnu aarch64-unknown-linux-gnu

      - name: Clean Python Symlinks
        run: |
          rm -f '/usr/local/bin/2to3' '/usr/local/bin/python3' '/usr/local/bin/python3-config'

      - name: Cache Rust targets
        uses: actions/cache@v4
        id: rust-targets-cache
        with:
          path: |
            ~/.rustup
            ~/.cargo
          key: rust-targets-${{ runner.os }}-${{ formatDate('YYYY-MM') }}
          restore-keys: |
            rust-targets-${{ runner.os }}-

      - name: Install Rust Targets and wasm-pack
        if: steps.rust-targets-cache.outputs.cache-hit != 'true'
        run: |
          rustup target add armv7-linux-androideabi \
            i686-linux-android \
            aarch64-linux-android \
            x86_64-linux-android \
            aarch64-apple-darwin \
            x86_64-apple-darwin \
            aarch64-unknown-linux-gnu \
            x86_64-unknown-linux-gnu
          cargo install wasm-pack

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Update gradle.properties with new version
        run: |
          sed -i '' 's/^version = *.*.*/version = ${{ github.event.inputs.version }}/' gradle.properties

      - name: Update yarn
        run: |
          ./gradlew kotlinUpgradeYarnLock

      - name: Configure Gradle and GPG for Publishing
        if: ${{ inputs.release_maven }}
        env:
          SIGNING_KEY: ${{ secrets.HYP_BOT_GPG_PRIVATE }}
          MAVEN_CENTRAL_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_CENTRAL_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
          SIGNING_KEY_PASSWORD: ${{ secrets.HYP_BOT_GPG_PASSWORD }}
        run: |
          export GNUPGHOME=$(mktemp -d)
          chmod 700 "$GNUPGHOME"
          echo "allow-loopback-pinentry" >> "$GNUPGHOME/gpg-agent.conf"
          echo "pinentry-mode loopback" >> "$GNUPGHOME/gpg.conf"

          echo "$SIGNING_KEY" | gpg --batch --yes --passphrase "$SIGNING_KEY_PASSWORD" --pinentry-mode loopback --import

          KEY_ID=$(gpg --with-colons --list-secret-keys | awk -F: '/^sec:/ { print substr($5, length($5)-7, 8) }')
          echo "Extracted GPG key ID: $KEY_ID"

          gpg --batch --yes --pinentry-mode loopback --passphrase "$SIGNING_KEY_PASSWORD" --export-secret-keys > ${HOME}/secring.gpg

          echo "mavenCentralUsername=${MAVEN_CENTRAL_USERNAME}" >> gradle.properties
          echo "mavenCentralPassword=${MAVEN_CENTRAL_PASSWORD}" >> gradle.properties
          echo "signing.keyId=${KEY_ID}" >> gradle.properties
          echo "signing.password=${SIGNING_KEY_PASSWORD}" >> gradle.properties
          echo "signing.secretKeyRingFile=${HOME}/secring.gpg" >> gradle.properties
          echo "=== gradle.properties content ==="
          cat gradle.properties

      - name: Build Kotlin Multiplatform Swift Artifacts
        if: ${{ inputs.release_swift }}
        run: |
          ./gradlew :apollo:createSwiftPackage

      - name: Build Kotlin Multiplatform Maven Artifacts
        if: ${{ inputs.release_maven }}
        run: |
          ./gradlew publishToMavenLocal

      - name: Build Kotlin Multiplatform NPM Artifacts
        if: ${{ inputs.release_ts }}
        run: |
          ./gradlew :apollo:assembleJsPackage

      - name: Prepare Swift XCFramework
        if: ${{ inputs.release_swift }}
        run: |
          cd ./apollo/build/packages/ApolloSwift
          zip -r Apollo.xcframework.zip Apollo.xcframework
          cd ${{ github.workspace }}
          checksum=$(swift package compute-checksum ./apollo/build/packages/ApolloSwift/Apollo.xcframework.zip)
          sed -i.bak \
            -e "s/checksum:.*/checksum: \"$checksum\"/" \
            -e "s|download/.*/Apollo.xcframework.zip|download/v${{ github.event.inputs.version }}/Apollo.xcframework.zip|" \
            Package.swift

      - name: Publish JVM & Android to Maven Central
        if: ${{ inputs.release_maven }}
        run: |
          ./gradlew publishAllPublicationsToMavenCentralRepository -Pversion=${{ github.event.inputs.version }}

      - name: Publish TypeScript package to npm
        if: ${{ inputs.release_ts }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: npm publish
        if: ${{ inputs.release_ts }}
        run: |
          ./gradlew :apollo:publishJsPackageToNpmjsRegistry
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Commit updated files and tag the release
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: |
            chore(release): v${{ github.event.inputs.version }}
          tagging_message: v${{ github.event.inputs.version }}
          file_pattern: |
            Package.swift
            package.json
            CHANGELOG.md
            gradle.properties

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: ${{ inputs.release_swift }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          files: |
            ./apollo/build/packages/ApolloSwift/Apollo.xcframework.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
