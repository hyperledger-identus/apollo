// Automatically generated by dukat and then slightly adjusted manually to make it compile
@file:Suppress("ktlint", "internal:ktlint-suppression")
// @file:Suppress("INTERFACE_WITH_SUPERCLASS", "OVERRIDING_FINAL_MEMBER", "RETURN_TYPE_MISMATCH_ON_OVERRIDE", "CONFLICTING_OVERLOADS")
@file:JsModule("@noble/curves/secp256k1")

package org.hyperledger.identus.apollo.utils.external.secp256k1

import org.khronos.webgl.*
import org.w3c.dom.*
import org.w3c.dom.events.*
import org.w3c.dom.parsing.*
import org.w3c.dom.svg.*
import org.w3c.dom.url.*
import org.w3c.fetch.*
import org.w3c.files.*
import org.w3c.notifications.*
import org.w3c.performance.*
import org.w3c.workers.*
import org.w3c.xhr.*
import kotlin.js.*

/**
 * Represents an external interface `T$0`.
 *
 * This interface defines four properties:
 * - `k1neg`: A boolean indicating whether `k1` is negative.
 * - `k1`: Any value representing the first key.
 * - `k2neg`: A boolean indicating whether `k2` is negative.
 * - `k2`: Any value representing the second key.
 *
 * Use this interface to manipulate and access the keys and their values.
 */
external interface `T$0` {
    var k1neg: Boolean
    var k1: Any
    var k2neg: Boolean
    var k2: Any
}

/**
 * Represents an external interface `T$1`.
 *
 * This interface has the following properties:
 * - `beta`: Any
 * - `splitScalar`: A function that takes a parameter `k` of type `Any` and returns an object of type `T$0`.
 */
external interface `T$1` {
    var beta: Any
    var splitScalar: (k: Any) -> `T$0`
}


/**
 * A class representing the `T$2` interface.
 *
 * @property nBitLength The bit length of `n`.
 * @property nByteLength The byte length of `n`.
 * @property Fp The value of `Fp`.
 * @property n The value of `n`.
 * @property h The value of `h`.
 * @property hEff The effective value of `h`.
 * @property Gx The value of `Gx`.
 * @property Gy The value of `Gy`.
 * @property allowInfinityPoint A flag indicating whether the infinity point is allowed.
 * @property a The value of `a`.
 * @property b The value of `b`.
 * @property allowedPrivateKeyLengths An array of allowed private key lengths.
 * @property wrapPrivateKey A flag indicating whether the private key should be wrapped.
 * @property endo The endomorphism parameters.
 * @property hash The hashing algorithm.
 * @property hmac The HMAC function.
 * @property randomBytes The function to generate random bytes.
 * @property lowS A flag indicating whether low values of `S` are required.
 * @property bits2int The function to convert bits to an integer.
 * @property bits2int_modN The function to convert bits to an integer modulo `N`.
 * @property p The value of `p`.
 */

external class BigInt {
    fun toBuffer()

}

external class ProjectivePoint {
        fun fromHex(bytes: Uint8Array): ProjectivePoint
        val x: Uint8Array
        val y: Uint8Array
        fun toRawBytes(isCompressed: dynamic): Uint8Array
}

external interface `T$2` {
    var nBitLength: Number
    var nByteLength: Number
    var Fp: Any
    var n: BigInt
    var h: Any
    var hEff: Any?
        get() = definedExternally
        set(value) = definedExternally
    var Gx: Any
    var Gy: Any
    var allowInfinityPoint: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var a: Any
    var b: Any
    var allowedPrivateKeyLengths: Array<Number>?
        get() = definedExternally
        set(value) = definedExternally
    var wrapPrivateKey: Boolean?
        get() = definedExternally
        set(value) = definedExternally
    var endo: `T$1`?
        get() = definedExternally
        set(value) = definedExternally
    var hash: Any
    var hmac: (key: Uint8Array, messages: Uint8Array) -> Uint8Array
    var randomBytes: (bytesLength: Number?) -> Uint8Array
    var lowS: Boolean
    var bits2int: ((bytes: Uint8Array) -> Any)?
        get() = definedExternally
        set(value) = definedExternally
    var bits2int_modN: ((bytes: Uint8Array) -> Any)?
        get() = definedExternally
        set(value) = definedExternally
    var p: Any
}

/**
 * Represents the interface `T$4`.
 */
external interface `T$4` {
    var normPrivateKeyToScalar: (key: dynamic /* Uint8Array | String | Any */) -> BigInt
    fun isValidPrivateKey(privateKey: Uint8Array): Boolean
    fun isValidPrivateKey(privateKey: String): Boolean
    fun isValidPrivateKey(privateKey: Any): Boolean
    var randomPrivateKey: () -> Uint8Array
}

external interface SignatureType {
    val r: Any
    val s: Any
    val recovery: Number?
        get() = definedExternally
    fun assertValidity()
    fun addRecoveryBit(recovery: Number): SignatureType /* SignatureType & `T$12` */
    fun hasHighS(): Boolean
    fun normalizeS(): SignatureType
    fun recoverPublicKey(msgHash: Uint8Array): Any
    fun recoverPublicKey(msgHash: String): Any
    fun toCompactRawBytes(): Uint8Array
    fun toCompactHex(): String
    fun toDERRawBytes(isCompressed: Boolean = definedExternally): Uint8Array
    fun toDERHex(isCompressed: Boolean = definedExternally): String
}

external interface SignatureConstructor {
    fun fromCompact(hex: Uint8Array): SignatureType
    fun fromCompact(hex: String): SignatureType
    fun fromDER(hex: Uint8Array): SignatureType
    fun fromDER(hex: String): SignatureType
}

/**
 * Represents the signature `T$6`.
 */
external interface `T$6` {
    var normPrivateKeyToScalar: (key: dynamic /* Uint8Array | String | Any */) -> Any
}

/**
 * Represents an external interface `T$5`.
 */
external interface `T$5` {
    var create: (hash: Any) -> Any
    var CURVE:`T$2`
    var getPublicKey: (privateKey: dynamic /* Uint8Array | String | Any */, isCompressed: Boolean?) -> Uint8Array
    var getSharedSecret: (privateA: dynamic /* Uint8Array | String | Any */, publicB: dynamic /* Uint8Array | String */, isCompressed: Boolean?) -> Uint8Array
    var sign: (msgHash: dynamic /* Uint8Array | String */, privKey: dynamic /* Uint8Array | String | Any */, opts: Any?) -> SignatureType
    var verify: (signature: SignatureType, msgHash: dynamic /* Uint8Array | String */, publicKey: dynamic /* Uint8Array | String */, opts: Any?) -> Boolean
    var ProjectivePoint: ProjectivePoint
    var Signature: SignatureConstructor
    var utils: `T$4`
}


/**
 * Represents the secp256k1 variable.
 */
external var secp256k1: `T$5`
