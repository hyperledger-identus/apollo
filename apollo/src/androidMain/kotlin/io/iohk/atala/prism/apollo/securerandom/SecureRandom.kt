package io.iohk.atala.prism.apollo.securerandom

import android.os.Build

/**
 * The SecureRandom class provides a platform-specific implementation for generating secure random numbers.
 *
 * @property seed The seed value used for initializing the random number generator.
 *
 * @see [java.security.SecureRandom]
 */
actual class SecureRandom actual constructor(
    actual val seed: ByteArray
) : SecureRandomInterface, java.security.SecureRandom() {
    /**
     * The `jvmSecureRandom` property provides a platform-specific implementation for generating secure random numbers.
     *
     * It returns an instance of `java.security.SecureRandom` that is appropriate for the current Android version.
     *
     * If the Android build version is equal to or greater than Oreo (Android version 8.0), it uses the `getInstanceStrong()` method of `SecureRandom` class to get an instance of
     * the class.
     * Otherwise, it uses the `SecureRandom(byte[])` constructor and initializes it with the specified seed value.
     *
     * Note: The seed value used for initialization is provided through the `seed` property of the containing class.
     *
     * @return An instance of `java.security.SecureRandom` appropriate for the Android version.
     *
     * @see [java.security.SecureRandom]
     * @see [SecureRandomInterface]
     * @see [SecureRandomStaticInterface]
     * @see [nextBytes]
     */
    private val jvmSecureRandom: java.security.SecureRandom
        get() {
            return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                java.security.SecureRandom.getInstanceStrong()
            } else {
                java.security.SecureRandom(seed)
            }
        }

    init {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            jvmSecureRandom.setSeed(seed)
        }
    }

    /**
     * Generates a specified number of secure random bytes.
     *
     * @param size The number of random bytes to generate.
     * @return A byte array containing the generated random bytes.
     */
    override fun nextBytes(size: Int): ByteArray {
        val bytes = ByteArray(size)
        jvmSecureRandom.nextBytes(bytes)
        return bytes
    }

    actual companion object : SecureRandomStaticInterface {
        /**
         * jvmSecureRandom is a private variable that represents a secure random number generator.
         *
         * It is an instance of the java.security.SecureRandom class, which is used for generating cryptographically strong random numbers.
         * The random numbers generated by this variable are suitable for use in security-sensitive applications, such as generating encryption keys or passwords.
         *
         * This variable is lazy-initialized and its value is determined by the build version of the JVM.
         * If the build version is greater than or equal to Build.VERSION_CODES.O, it uses the `getInstanceStrong()` method of SecureRandom to create the instance.
         * Otherwise, it creates a new instance of SecureRandom using the default constructor.
         *
         * The jvmSecureRandom variable implements both the SecureRandomInterface and SecureRandomStaticInterface interfaces.
         * The SecureRandomInterface defines the contract for generating secure random bytes using the `nextBytes()` method.
         * The SecureRandomStaticInterface defines the contract for generating a random seed of specified length using the `generateSeed()` method.
         *
         * Example usage:
         * ```
         * override fun generateSeed(numBytes: Int): ByteArray {
         *     return jvmSecureRandom.generateSeed(numBytes)
         * }
         * ```
         */
        private val jvmSecureRandom: java.security.SecureRandom
            get() {
                return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    java.security.SecureRandom.getInstanceStrong()
                } else {
                    java.security.SecureRandom()
                }
            }

        /**
         * Generates a random seed of the specified length in bytes.
         *
         * @param numBytes The length of the seed in bytes.
         * @return The generated seed as a ByteArray.
         */
        override fun generateSeed(numBytes: Int): ByteArray {
            return jvmSecureRandom.generateSeed(numBytes)
        }
    }
}
